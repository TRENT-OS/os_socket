/*
 * TRENTOS Network Stack, generic CAmkES template code
 *
 * Copyright (C) 2019-2021, HENSOLDT Cyber GmbH
 */

#pragma once

#include <if_OS_Nic.camkes>
import <if_OS_Socket.camkes>;
import <if_OS_Timer.camkes>;


//------------------------------------------------------------------------------
#define _NWSTACK_MACRO_LOOP_1(_m_)      _m_(1)
#define _NWSTACK_MACRO_LOOP_2(_m_)      _m_(2)  _NWSTACK_MACRO_LOOP_1(_m_)
#define _NWSTACK_MACRO_LOOP_3(_m_)      _m_(3)  _NWSTACK_MACRO_LOOP_2(_m_)
#define _NWSTACK_MACRO_LOOP_4(_m_)      _m_(4)  _NWSTACK_MACRO_LOOP_3(_m_)
#define _NWSTACK_MACRO_LOOP_5(_m_)      _m_(5)  _NWSTACK_MACRO_LOOP_4(_m_)
#define _NWSTACK_MACRO_LOOP_6(_m_)      _m_(6)  _NWSTACK_MACRO_LOOP_5(_m_)
#define _NWSTACK_MACRO_LOOP_7(_m_)      _m_(7)  _NWSTACK_MACRO_LOOP_6(_m_)
#define _NWSTACK_MACRO_LOOP_8(_m_)      _m_(8)  _NWSTACK_MACRO_LOOP_7(_m_)
#define _NWSTACK_MACRO_LOOP_9(_m_)      _m_(9)  _NWSTACK_MACRO_LOOP_8(_m_)
#define _NWSTACK_MACRO_LOOP_10(_m_)     _m_(10) _NWSTACK_MACRO_LOOP_9(_m_)
#define _NWSTACK_MACRO_LOOP_11(_m_)     _m_(11) _NWSTACK_MACRO_LOOP_10(_m_)
#define _NWSTACK_MACRO_LOOP_12(_m_)     _m_(12) _NWSTACK_MACRO_LOOP_11(_m_)
#define _NWSTACK_MACRO_LOOP_13(_m_)     _m_(13) _NWSTACK_MACRO_LOOP_12(_m_)
#define _NWSTACK_MACRO_LOOP_14(_m_)     _m_(14) _NWSTACK_MACRO_LOOP_13(_m_)
#define _NWSTACK_MACRO_LOOP_15(_m_)     _m_(15) _NWSTACK_MACRO_LOOP_14(_m_)
#define _NWSTACK_MACRO_LOOP_16(_m_)     _m_(16) _NWSTACK_MACRO_LOOP_15(_m_)

// We need this intermediate macro so macro expansion to work properly.
#define _NWSTACK_MACRO_LOOP(_cnt_, _macro_) \
    _NWSTACK_MACRO_LOOP_##_cnt_(_macro_)


//------------------------------------------------------------------------------
#define NwStack_Socket_DECLARE(_n_) \
    emits     NwStack_WrEv    e_write_##_n_; \
    consumes  NwStack_WrEv    c_write_##_n_; \
    \
    emits     NwStack_RdEv    e_read_##_n_; \
    consumes  NwStack_RdEv    c_read_##_n_; \
    \
    emits     NwStack_ConnEv  e_conn_##_n_; \
    consumes  NwStack_ConnEv  c_conn_##_n_; \
    \
    dataport  Buf             socket_##_n_##_port;


//------------------------------------------------------------------------------
#define NwStack_SocketConn_DECLARE(_n_) \
    connection seL4Notification conn_event_write_##_n_( \
        from e_write_##_n_, \
        to   c_write_##_n_); \
    \
    connection seL4Notification conn_event_read_##_n_( \
        from e_read_##_n_, \
        to   c_read_##_n_); \
    \
    connection seL4Notification conn_event_connect_##_n_( \
        from e_conn_##_n_, \
        to   c_conn_##_n_);


//------------------------------------------------------------------------------
#define _NwStack_EMPTY
#define NwStack_NO_ADDITIONAL_INTERFACES _NwStack_EMPTY

#define NwStack_COMPONENT_DEFINE( \
    _name_, \
    _nic_port_size_, \
    _num_sockets_, \
    _other_interfaces_) \
    \
    component _name_ \
    { \
        control; \
        \
        consumes  EventDataAvailable    event_tick_or_data; \
        emits     EventDataAvailable    event_internal; \
        has       mutex                 allocatorMutex; \
        has       mutex                 nwstackMutex; \
        has       mutex                 socketControlBlockMutex; \
        has       mutex                 stackThreadSafeMutex; \
        \
        /*------------------------------------------------------------------*/ \
        /* interface TimeServer */ \
        uses      if_OS_Timer           timeServer_rpc; \
        consumes  TimerReady            timeServer_notify; \
        \
        /*------------------------------------------------------------------*/ \
        /* if_OS_Nic without a dedicated event, because our interface */ \
        /* 'event_tick_or_data' is a shared sink for multiple event sources */ \
        IF_OS_NIC_USE_WITHOUT_EVENT(nic, _nic_port_size_) \
        \
        /*------------------------------------------------------------------*/ \
        /* interface to application */ \
        provides  if_OS_Socket          networkStack_rpc; \
        _NWSTACK_MACRO_LOOP(_num_sockets_, NwStack_Socket_DECLARE) \
        /*------------------------------------------------------------------*/ \
        /* other interfaces */ \
        _other_interfaces_ \
        \
        composition \
        { \
            connection seL4NotificationNative conn_event_internal( \
                from event_internal, \
                to   event_tick_or_data); \
            \
            _NWSTACK_MACRO_LOOP(_num_sockets_, NwStack_SocketConn_DECLARE) \
        } \
    }


//------------------------------------------------------------------------------
// Connect a network stack instance to a ticker event and a NIC to it. So far,
// all if_OS_Nic related fields of the network stack use the prefix 'nic', and
// the same prefix is also used by all network drivers for their if_OS_Nic
// related fields. As long a no NIC driver breaks this scheme (e.g. because it
// has multiple if_OS_Nic), there is no need to have an additional macro
// parameter here that passes the driver's prefix.
// additional macro parameter.
#define NwStack_INSTANCE_CONNECT( \
    _name_, \
    _ticker_event_src_, \
    _nic_) \
    \
    connection seL4NotificationNative conn_event_##_name_##_ticker( \
        from _ticker_event_src_, \
        to   _name_.event_tick_or_data); \
    \
    IF_OS_NIC_CONNECT_WITHOUT_EVENT( \
        _name_, \
        nic, \
        _nic_, \
        nic) \
    \
    IF_OS_NIC_CONNECT_EVENT( \
        _name_, \
        event_tick_or_data, \
        _nic_, \
        nic)


//------------------------------------------------------------------------------
// Connect an application to a network stack socket.
#define NwStack_INSTANCE_CONNECT_SOCKET( \
    _inst_, \
    _n_, \
    _client_rpc_, \
    _client_port_) \
    \
    connection seL4RPCCall conn_rpc_##_client_##_##_inst_##_##_n_( \
        from _client_rpc_, \
        to   _inst_.networkStack_rpc); \
    \
    connection seL4SharedData conn_port_##_client_##_##_inst_##_##_n_( \
        from _client_port_, \
        to   _inst_.socket_##_n_##_port);
